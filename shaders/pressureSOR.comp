#version 450
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = 0, binding = 0) readonly buffer VelocityBuffer {
    vec2 velocities[];
};
layout(set = 0, binding = 2) readonly buffer PressureBuffer {
    float pressures[];
};
layout(set = 0, binding = 4) writeonly buffer TempScalarBuffer {
    float tempScalar[];
};

layout(push_constant) uniform PushConstants {
    uvec2 gridDim; // Grid dimensions (width, height)
    float deltaTime; // Time step Δt
    float density; // Fluid density ρ (not directly used if viscosity is kinematic)
    float viscosity; // Kinematic viscosity ν
    int numPressureIterations; // Iterations for Poisson solver (max_it for ψ)
    int numOverallIterations; // Total simulation steps (unused in this shader)
    float omegaSOR; // Relaxation factor for SOR in Poisson solver (ω_SOR)
    float lidVelocity; // Velocity of the top lid (U0)
    float h; // Cell size (Δx = Δy = h)
} pc;

void main() {
    ivec2 ij = ivec2(gl_GlobalInvocationID.xy);
    uint W = pc.gridDim.x;
    uint H = pc.gridDim.y;
    uint idx = ij.y * W + ij.x;
    // tempScalar[idx] = 4;
    // Dirichlet p=0 on boundary
    if (ij.x == 0 || ij.y == 0 || ij.x >= int(W) - 1 || ij.y >= int(H) - 1) {
        tempScalar[idx] = 0.0;
        return;
    }

    uint ip = idx + 1;
    uint im = idx - 1;
    uint jp = idx + W;
    uint jm = idx - W;

    // compute the right‐hand side f = (∂xu)^2 + (∂yv)^2 + 2(∂yu)(∂xv)
    float ux_p = (velocities[ip].x - velocities[im].x) * (0.5 / pc.h);
    float vy_p = (velocities[jp].y - velocities[jm].y) * (0.5 / pc.h);
    float uy_p = (velocities[jp].x - velocities[jm].x) * (0.5 / pc.h);
    float vx_p = (velocities[ip].y - velocities[im].y) * (0.5 / pc.h);

    float f = ux_p * ux_p + vy_p * vy_p + 2.0 * uy_p * vx_p;

    float pC = pressures[idx];
    float sumNbrs = pressures[ip] + pressures[im]
            + pressures[jp] + pressures[jm];
    float target = 0.25 * (sumNbrs + pc.h * pc.h * f);
    tempScalar[idx] = mix(pC, target, pc.omegaSOR);
}
