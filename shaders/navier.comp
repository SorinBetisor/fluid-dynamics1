#version 450

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

// Descriptor Set for Fluid Buffers
layout(set = 0, binding = 0) buffer VelocityBuffer {
    vec2 velocities[];
};
layout(set = 0, binding = 1) buffer DensityBuffer {
    float densities[];
};
layout(set = 0, binding = 2) buffer PressureBuffer {
    float pressures[];
};
layout(set = 0, binding = 3) buffer StreamFunctionBuffer {
    float streamFuncScalars[];
};
layout(set = 0, binding = 4) buffer TempScalarBuffer {
    vec2 tempVec2[];
};

// Push Constants
layout(push_constant) uniform PushConstants {
    uvec2 gridDim; // Grid dimensions (width, height)
    float deltaTime; // Time step Δt
    float density; // Fluid density ρ (not directly used if viscosity is kinematic)
    float viscosity; // Kinematic viscosity ν
    int numPressureIterations; // Iterations for Poisson solver (max_it for ψ)
    int numOverallIterations; // Total simulation steps (unused in this shader)
    float omegaSOR; // Relaxation factor for SOR in Poisson solver (ω_SOR)
    float lidVelocity; // Velocity of the top lid (U0)
    float h; // Cell size (Δx = Δy = h)
} pc;

// Helper to convert 2D grid coordinates to 1D buffer index
uint idx(uint x, uint y) {
    return y * pc.gridDim.x + x;
}

// Helper to check if a point is on any boundary
bool is_on_boundary(uint gx, uint gy) {
    return (gx == 0 || gx == pc.gridDim.x - 1 || gy == 0 || gy == pc.gridDim.y - 1);
}

void main() {
    uint gx = gl_GlobalInvocationID.x;
    uint gy = gl_GlobalInvocationID.y;
    uint current_idx = idx(gx, gy);

    velocities[current_idx] = vec2(gx, gy);
    densities[current_idx] = gx;
    pressures[current_idx] = gy;
    streamFuncScalars[current_idx] = gx / gy;
}
