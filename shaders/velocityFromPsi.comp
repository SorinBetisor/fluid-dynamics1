#version 450
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = 0, binding = 3) readonly buffer StreamFunctionBuffer {
    float streamFuncScalars[];
};
layout(set = 0, binding = 5) writeonly buffer TempVectorBuffer {
    vec2 tempVec2[];
};

layout(push_constant) uniform PushConstants {
    uvec2 gridDim;
    float deltaTime;
    float density;
    float viscosity;
    int numPressureIterations;
    int numOverallIterations;
    float omegaSOR;
    float lidVelocity;
    float h;
} pc;

void main() {
    ivec2 ij = ivec2(gl_GlobalInvocationID.xy);
    uint W = pc.gridDim.x;
    uint H = pc.gridDim.y;
    uint idx = ij.y * W + ij.x;

    if (ij.x >= W || ij.y >= H) return; // Safety bounds check

    // --- Boundary Conditions for Velocity ---
    if (ij.y == int(H) - 1) { // Top boundary (LID)
        tempVec2[idx] = vec2(pc.lidVelocity, 0.0); // Lid moves horizontally
    } else if (ij.y == 0 || ij.x == 0 || ij.x == int(W) - 1) { // Other stationary walls
        tempVec2[idx] = vec2(0.0, 0.0); // No-slip: u=0, v=0
    } else { // --- Interior points ---
        uint ip = idx + 1;
        uint im = idx - 1;
        uint jp = idx + W;
        uint jm = idx - W;

        float dpsi_dx = (streamFuncScalars[ip] - streamFuncScalars[im]) * (0.5 / pc.h);
        float dpsi_dy = (streamFuncScalars[jp] - streamFuncScalars[jm]) * (0.5 / pc.h);

        // u =  ∂ψ/∂y, v = -∂ψ/∂x
        tempVec2[idx] = vec2(dpsi_dy, -dpsi_dx);
    }
}
