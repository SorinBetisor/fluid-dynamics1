#version 450

layout(local_size_x = 16, local_size_y = 16) in;

// Solution buffer
layout(binding = 0) buffer InputBuffer {
    float input_data[];
};

// RHS buffer
layout(binding = 1) buffer OutputBuffer {
    float output_data[];
};

// Grid properties buffer (1.0 for solid, 0.0 for fluid)
layout(binding = 2) buffer GridBuffer {
    float grid_data[];
};

// Constants
layout(binding = 3) uniform Constants {
    float dx;
    float dy;
    int width;
    int height;
    float f_factor;
    float beta;
    vec2 padding;
};

void main() {
    uint i = gl_GlobalInvocationID.y;
    uint j = gl_GlobalInvocationID.x;
    
    // Skip if outside the grid
    if (i >= height || j >= width) {
        return;
    }
    
    uint idx = i * width + j;
    
    // Check if this is a solid cell
    if (grid_data[idx] > 0.5) {
        output_data[idx] = input_data[idx]; // Preserve the boundary value
        return;
    }
    
    // For interior fluid cells, solve Poisson equation
    float p_center = input_data[idx];
    
    // Get neighbor values (handle boundaries)
    float p_left = (j > 0) ? input_data[i * width + (j-1)] : p_center;
    float p_right = (j < width-1) ? input_data[i * width + (j+1)] : p_center;
    float p_top = (i > 0) ? input_data[(i-1) * width + j] : p_center;
    float p_bottom = (i < height-1) ? input_data[(i+1) * width + j] : p_center;
    
    // Check if neighbors are solid
    if (j > 0 && grid_data[i * width + (j-1)] > 0.5) p_left = p_center;
    if (j < width-1 && grid_data[i * width + (j+1)] > 0.5) p_right = p_center;
    if (i > 0 && grid_data[(i-1) * width + j] > 0.5) p_top = p_center;
    if (i < height-1 && grid_data[(i+1) * width + j] > 0.5) p_bottom = p_center;
    
    // Jacobi iteration for Poisson equation
    float f_val = output_data[idx]; // Right-hand side
    float dx2 = dx * dx;
    float dy2 = dy * dy;
    float denom = 2.0 * (dx2 + dy2);
    
    // Update p using the five-point stencil
    float p_new = ((p_right + p_left) * dy2 + (p_bottom + p_top) * dx2 - f_val * dx2 * dy2) / denom;
    
    // Store the updated value
    output_data[idx] = p_new;
} 